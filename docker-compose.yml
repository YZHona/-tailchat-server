version: "3.3"

services:
  # 应用网关
  service-gateway:
    build:
      context: .
    image: tailchat-server
    env_file: docker-compose.env
    environment:
      SERVICES: gateway
      PORT: 3000
    depends_on:
      - mongo
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gw.rule=PathPrefix(`/`)"
      - "traefik.http.services.api-gw.loadbalancer.server.port=3000"
    networks:
      - internal

  # 用户服务
  service-user:
    build:
      context: .
    image: tailchat-server
    env_file: docker-compose.env
    environment:
      SERVICES: user/user,user/dmlist,user/mail,user/friend,user/friendRequest
    depends_on:
      - mongo
      - redis
    networks:
      - internal

  # 群组服务
  service-group:
    build:
      context: .
    image: tailchat-server
    env_file: docker-compose.env
    environment:
      SERVICES: group/group,group/invite
    depends_on:
      - mongo
      - redis
    networks:
      - internal

  # 聊天服务
  service-chat:
    build:
      context: .
    image: tailchat-server
    env_file: docker-compose.env
    environment:
      SERVICES: chat/message,chat/converse
    depends_on:
      - mongo
      - redis
    networks:
      - internal

  # 文件服务 / 插件服务
  service-file:
    build:
      context: .
    image: tailchat-server
    env_file: docker-compose.env
    environment:
      SERVICES: file,plugin/registry
    depends_on:
      - mongo
      - redis
      - minio
    networks:
      - internal

  # 数据库
  mongo:
    image: mongo:4
    restart: on-failure
    volumes:
      - data:/data/db
    networks:
      - internal

  # 数据缓存与中转通讯
  redis:
    image: redis:alpine
    restart: on-failure
    networks:
      - internal

  # 存储服务
  minio:
    image: minio/minio
    restart: on-failure
    networks:
      - internal
    environment:
      MINIO_ROOT_USER: tailchat
      MINIO_ROOT_PASSWORD: com.msgbyte.tailchat
    volumes:
      - storage:/data
    command: minio server /data --console-address ":9001"

  # 路由转发
  traefik:
    image: traefik:v2.1
    command:
      - "--api.insecure=true" # Don't do that in production!
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
    ports:
      - 11000:80
      - 11001:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - internal
      - default

networks:
  internal:

volumes:
  data:
  storage:
